
0 - leave room : goBackToRoomsList():ChatPublicRoomMsg.vue
1 - private messages

npm remove @vue/cli-plugin-eslint
--------------------------
			IMPORTANT 
--------------------------
- Change all sessionId ( or user's session data )  to req.user.id

--------------------------.env
POSTGRES_HOST=127.0.0.1
POSTGRES_PORT=5432
POSTGRES_USER=ler-rech
POSTGRES_PASSWORD=123456
POSTGRES_DATABASE=ft_transcendence
PORT=3000
MODE=DEV
RUN_MIGRATIONS=true
POSTGRES_DATABASE=ft_transcendence
JWTSECRET=hasdfh464DSFS
CLIENT_ID=5478b01b4ef88f8c5439b215a1b38c2dc5f12d99b949173c94232a616534abef
CLIENT_SECRET=380d7a1e59e13c9a06da4e5ad884b1cde60d445ee69efdeaa3867e064ef3da86
--------------------------

- socketio frontend code : 
	- /rooms (rooms list because we use socketIO to join and to leave a room)
	-/rooms/:roomId (for rooms messages socketIO)
	-/messages/:userId (form private messages socketIO)

--------------------------

0 - // TODO : baned list : should include ids of all banned users of this room + muted list of this room that expired (created + banned.duration > date.now())

- access private room ( with password, save in user session )
	: join room ===> append it to rooms[roomId1, roomId2, ...] and store it in jwt token
	: leave a room (button) ===> remove the room id from rooms param that is stored in jwt token
	
2 - socketio
--------------------------


- If the user is blocked then don't show it's messages in both private messages + rooms
	- get direct messages : check if the user is blocked : if yes then return an empty array
	- get room messages :
						if the user is banned or muted from the Roo ===> then filter his missages (remove them from the results)
						if "I" blocked the user then filter his messages (remove them from the results)

----------


2 - encrypt room password before saving it, and don't return it to clients when returning rooms data

3 - auth (jwt)
4 - register a user ( unique nickName, upload image )

